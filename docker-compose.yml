version: '3'
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:4.0.0
    restart: unless-stopped
    ports:
      - 22181:22181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - default

  kafka-1:
    image: confluentinc/cp-kafka:4.0.0-2
    depends_on:
      - zookeeper-1
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:22181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092
      # suppress verbosity
      # https://github.com/confluentinc/cp-docker-images/blob/master/debian/kafka/include/etc/confluent/docker/log4j.properties.template
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - default

  kafka-create-topics:
    image: confluentinc/cp-kafka:4.0.0-2
    depends_on:
      - kafka-1
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: |
      bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka-1:29092 1 20 && \
      kafka-topics --create --topic event --partitions 1 --replication-factor 1 --if-not-exists --zookeeper zookeeper-1:22181 && \
      sleep infinity'
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - default

  kafka-rest-proxy:
    image: confluent/rest-proxy:latest
    depends_on:
      - zookeeper-1
      - kafka-1
      - kafka-schema-registry
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper-1:22181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka-1:29092
    networks:
      - default

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:4.0.0-2
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper-1:22181
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper-1
      - kafka-1
    networks:
      - default

  kafka-create-schema:
    image: confluentinc/cp-kafka:4.0.0-2
    depends_on:
      - kafka-schema-registry
    command: |
      bash -c 'echo Waiting for kafka-schema-registry to be ready... && \
      cub sr-ready kafka-schema-registry 8081 20 && \
      for item in "key" "event"; do curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \
        --data "{\"schema\": \"$$(python /home/app/stringify.py /home/app/avro/$$item.avsc)\" }" \
        http://kafka-schema-registry:8081/subjects/$$item/versions; done &&
      sleep infinity'
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    volumes:
      - ./:/home/app/
    networks:
      - default

  kafka-schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.3
    ports:
      - 8001:8000
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      - kafka-schema-registry
    networks:
      - default

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    ports:
      - 8000:8000
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zookeeper-1
      - kafka-1
      - kafka-schema-registry
      - kafka-rest-proxy
    networks:
      - default

networks:
    default:
